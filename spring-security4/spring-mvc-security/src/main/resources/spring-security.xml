<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">
    <!--

       Spring Security 配置文件
    -->

    <!--Spring Security 过滤器链配置
        <security:http>：spring security 过滤链接配置
        1）过滤拦截什么资源
        2）什么资源什么角色权限
        3) 定义认证方式：HttpBasic、FormLogin等
        4）定义登录页面、登录请求地址、错误处理方式等等
        <security:http-basic/>：使用HttpBasic方式认证
    -->
    <security:http>
        <!--
            pattern：需要拦截的资源
            access: 定义资源拦截方式
                isFullyAuthenticated() : 资源只有在认证后才能够访问
                permitAll() 所有人(匿名用户和登录用户)都可以访问
                isAnonymous() 只有匿名用户才能访问
        -->
        <security:intercept-url pattern="/userLogin" access="permitAll()"/>
        <security:intercept-url pattern="/user/login" access="permitAll()"/>
        <security:intercept-url pattern="/" access="permitAll()"/>
        <security:intercept-url pattern="/index" access="permitAll()"/>
        <security:intercept-url pattern="/index.html" access="permitAll()"/>
        <!--访问权限控制配置-->
        <security:intercept-url pattern="/product/add" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/product/update" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/product/list" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/product/delete" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
        <!--指定认证方式 当前使用http-basic-->
        <!--        <security:http-basic/>-->
        <!--认证方式：form-login方式
         login-page 自定义登录url 注意如果使用这个，需要放行这个url，
            <security:intercept-url pattern="/userLogin" access="permitAll()"/>
         保证后续的正常进行
         password-parameter/username-parameter用来指定传入参数的名称
         login-processing-url 登录请求的地址,注意这个请求也是需要放行的，否则将会无法登录
          <security:intercept-url pattern="/user/login" access="permitAll()"/>
          注意在自定义login页面的时候将会报错，关于csrf的，可以在登录页面中使用如下的配置使用csrf
          <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
          或者使用如下配置关闭csrf
           <security:csrf disabled="true"/>
        -->
        <security:form-login login-page="/userLogin"
                             password-parameter="pass"
                             username-parameter="user"
                             login-processing-url="/user/login"
                             default-target-url="/index"
                             authentication-success-handler-ref="springAuthenticationSuccessHandler"
                             authentication-failure-handler-ref="springAuthenticationFailureHandler"/>
        <!--关闭Spring Security CSRF机制-->
        <security:csrf disabled="true"/>
        <!--指定全局权限不足错误页面-->
        <security:access-denied-handler error-page="/error"/>
    </security:http>

    <!--
        <security:authentication-manager/>： 认证管理器
        1） 认证信息（账户、密码、权限信息等）
    -->
    <security:authentication-manager>
        <!--配置用户权限提供信息-->
        <security:authentication-provider user-service-ref="springSecurityUserDetailService">
            <!--用户信息-->
            <!--            <security:user-service>-->
            <!--                &lt;!&ndash;用户信息&ndash;&gt;-->
            <!--                <security:user name="admin" password="1" authorities="ROLE_ADMIN"/>-->
            <!--                <security:user name="chensj" password="1" authorities="ROLE_USER"/>-->
            <!--            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>
    <!--注入UserDetailService-->
    <bean id="springSecurityUserDetailService"
          class="org.chen.spring.security4.service.SpringSecurityUserDetailService"/>
    <!--自定义登录成功处理类-->
    <bean id="springAuthenticationSuccessHandler"
          class="org.chen.spring.security4.handler.SpringAuthenticationSuccessHandler"/>
    <!--自定义登录失败处理类-->
    <bean id="springAuthenticationFailureHandler"
          class="org.chen.spring.security4.handler.SpringAuthenticationFailureHandler"/>
</beans>
